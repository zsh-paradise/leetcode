package test;

/**
 * Created by zsh_paradise on 2018/11/20.
 * 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

 给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

 示例 1:

 输入: [1,2,3,1]
 输出: 4
 解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
 偷窃到的最高金额 = 1 + 3 = 4 。
 示例 2:

 输入: [2,7,9,3,1]
 输出: 12
 解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
 偷窃到的最高金额 = 2 + 9 + 1 = 12 。
 思路：引进一个数组，dp[i] 标识在第i家能获取到的最大金额。
 那么在在第i家能获取到的最大钱就是dp[i-1]合作dp[i-2]+nums[i-1] 联系两家的不能偷。
 dp是用1算起。  nums 是从0 算起。 这个是区别。 如果这个线状变成环状呢？首尾相连的
 */
public class Test198 {
    public int rob(int[] nums) {
        int length = nums.length;
        if(length ==0){return  0; };
        int[] dp = new int[length+1];
        dp[0] = 0 ;
        dp[1] = nums[0];
        for(int i = 1 ; i<length;i++){
            dp[i+1] = Math.max(dp[i],dp[i-1]+nums[i]);
        }
        return  dp[length];
    }
}
