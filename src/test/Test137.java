package test;

/**
 * Created by zsh_paradise on 2018/9/14.
 * 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

 说明：

 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

 示例 1:

 输入: [2,2,1]
 输出: 1
 示例 2:

 输入: [4,1,2,1,2]
 输出: 4
 假设如果 A = 60，且 B = 13，现在以二进制格式表示，它们如下所示：

 A = 0011 1100

 B = 0000 1101

 -----------------

 A&B = 0000 1100

 A|B = 0011 1101

 A^B = 0011 0001

 ~A  = 1100 0011

 & 两者同时为真才为真；| 两者一者为真就为真；^相同为假，不同为真

 所以可以从异或的特点得知，如果存在一个只出现一次的数字，那么该数组所有的元素异或结果大于0！！！

 */
public class Test137 {
    public int singleNumber(int[] nums) {
        //数组中如果有奇数个重复数，
        // 或者不止一个的不重复数，这个算法错误。
        int temp  =0 ;
        for(int num :nums){
            temp ^= num ;
        }
        return temp ;
    }

}
